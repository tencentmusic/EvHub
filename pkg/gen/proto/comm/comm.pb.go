// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.11.0
// source: comm/comm.proto

package comm

import (
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventTriggerType int32

const (
	//INVALID
	EventTriggerType_EVENT_TRIGGER_TYPE_INVALID       EventTriggerType = 0
	EventTriggerType_EVENT_TRIGGER_TYPE_REAL_TIME     EventTriggerType = 1
	EventTriggerType_EVENT_TRIGGER_TYPE_DELAY         EventTriggerType = 2
	EventTriggerType_EVENT_TRIGGER_TYPE_REPEAT        EventTriggerType = 3
	EventTriggerType_EVENT_TRIGGER_TYPE_DELAY_PROCESS EventTriggerType = 4
)

// Enum value maps for EventTriggerType.
var (
	EventTriggerType_name = map[int32]string{
		0: "EVENT_TRIGGER_TYPE_INVALID",
		1: "EVENT_TRIGGER_TYPE_REAL_TIME",
		2: "EVENT_TRIGGER_TYPE_DELAY",
		3: "EVENT_TRIGGER_TYPE_REPEAT",
		4: "EVENT_TRIGGER_TYPE_DELAY_PROCESS",
	}
	EventTriggerType_value = map[string]int32{
		"EVENT_TRIGGER_TYPE_INVALID":       0,
		"EVENT_TRIGGER_TYPE_REAL_TIME":     1,
		"EVENT_TRIGGER_TYPE_DELAY":         2,
		"EVENT_TRIGGER_TYPE_REPEAT":        3,
		"EVENT_TRIGGER_TYPE_DELAY_PROCESS": 4,
	}
)

func (x EventTriggerType) Enum() *EventTriggerType {
	p := new(EventTriggerType)
	*p = x
	return p
}

func (x EventTriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_comm_comm_proto_enumTypes[0].Descriptor()
}

func (EventTriggerType) Type() protoreflect.EnumType {
	return &file_comm_comm_proto_enumTypes[0]
}

func (x EventTriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventTriggerType.Descriptor instead.
func (EventTriggerType) EnumDescriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{0}
}

type EventRepeatEndType int32

const (
	//INVALID
	EventRepeatEndType_EVENT_REPEAT_END_TYPE_INVALID          EventRepeatEndType = 0
	EventRepeatEndType_EVENT_REPEAT_END_TYPE_END_BY_TIMESTAMP EventRepeatEndType = 1
	EventRepeatEndType_EVENT_REPEAT_END_TYPE_END_BY_COUNT     EventRepeatEndType = 2
)

// Enum value maps for EventRepeatEndType.
var (
	EventRepeatEndType_name = map[int32]string{
		0: "EVENT_REPEAT_END_TYPE_INVALID",
		1: "EVENT_REPEAT_END_TYPE_END_BY_TIMESTAMP",
		2: "EVENT_REPEAT_END_TYPE_END_BY_COUNT",
	}
	EventRepeatEndType_value = map[string]int32{
		"EVENT_REPEAT_END_TYPE_INVALID":          0,
		"EVENT_REPEAT_END_TYPE_END_BY_TIMESTAMP": 1,
		"EVENT_REPEAT_END_TYPE_END_BY_COUNT":     2,
	}
)

func (x EventRepeatEndType) Enum() *EventRepeatEndType {
	p := new(EventRepeatEndType)
	*p = x
	return p
}

func (x EventRepeatEndType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventRepeatEndType) Descriptor() protoreflect.EnumDescriptor {
	return file_comm_comm_proto_enumTypes[1].Descriptor()
}

func (EventRepeatEndType) Type() protoreflect.EnumType {
	return &file_comm_comm_proto_enumTypes[1]
}

func (x EventRepeatEndType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventRepeatEndType.Descriptor instead.
func (EventRepeatEndType) EnumDescriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{1}
}

//
type EventPulserType int32

const (
	//INVALID
	EventPulserType_EVENT_PULSER_TYPE_INVALID     EventPulserType = 0
	EventPulserType_EVENT_PULSER_TYPE_BY_INTERVAL EventPulserType = 1
	EventPulserType_EVENT_PULSER_TYPE_BY_CRONTAB  EventPulserType = 2
)

// Enum value maps for EventPulserType.
var (
	EventPulserType_name = map[int32]string{
		0: "EVENT_PULSER_TYPE_INVALID",
		1: "EVENT_PULSER_TYPE_BY_INTERVAL",
		2: "EVENT_PULSER_TYPE_BY_CRONTAB",
	}
	EventPulserType_value = map[string]int32{
		"EVENT_PULSER_TYPE_INVALID":     0,
		"EVENT_PULSER_TYPE_BY_INTERVAL": 1,
		"EVENT_PULSER_TYPE_BY_CRONTAB":  2,
	}
)

func (x EventPulserType) Enum() *EventPulserType {
	p := new(EventPulserType)
	*p = x
	return p
}

func (x EventPulserType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventPulserType) Descriptor() protoreflect.EnumDescriptor {
	return file_comm_comm_proto_enumTypes[2].Descriptor()
}

func (EventPulserType) Type() protoreflect.EnumType {
	return &file_comm_comm_proto_enumTypes[2]
}

func (x EventPulserType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventPulserType.Descriptor instead.
func (EventPulserType) EnumDescriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{2}
}

//
type TxStatus int32

const (
	TxStatus_TX_STATUS_INVALID  TxStatus = 0
	TxStatus_TX_STATUS_PREPARE  TxStatus = 1
	TxStatus_TX_STATUS_COMMIT   TxStatus = 2
	TxStatus_TX_STATUS_ROLLBACK TxStatus = 3
	TxStatus_TX_STATUS_SUCCESS  TxStatus = 4
)

// Enum value maps for TxStatus.
var (
	TxStatus_name = map[int32]string{
		0: "TX_STATUS_INVALID",
		1: "TX_STATUS_PREPARE",
		2: "TX_STATUS_COMMIT",
		3: "TX_STATUS_ROLLBACK",
		4: "TX_STATUS_SUCCESS",
	}
	TxStatus_value = map[string]int32{
		"TX_STATUS_INVALID":  0,
		"TX_STATUS_PREPARE":  1,
		"TX_STATUS_COMMIT":   2,
		"TX_STATUS_ROLLBACK": 3,
		"TX_STATUS_SUCCESS":  4,
	}
)

func (x TxStatus) Enum() *TxStatus {
	p := new(TxStatus)
	*p = x
	return p
}

func (x TxStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_comm_comm_proto_enumTypes[3].Descriptor()
}

func (TxStatus) Type() protoreflect.EnumType {
	return &file_comm_comm_proto_enumTypes[3]
}

func (x TxStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxStatus.Descriptor instead.
func (TxStatus) EnumDescriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{3}
}

//
type ProtocolType int32

const (
	ProtocolType_PROTOCOL_TYPE_INVALID   ProtocolType = 0
	ProtocolType_PROTOCOL_TYPE_GRPC      ProtocolType = 1
	ProtocolType_PROTOCOL_TYPE_HTTP_PB   ProtocolType = 3
	ProtocolType_PROTOCOL_TYPE_HTTP_JSON ProtocolType = 5
)

// Enum value maps for ProtocolType.
var (
	ProtocolType_name = map[int32]string{
		0: "PROTOCOL_TYPE_INVALID",
		1: "PROTOCOL_TYPE_GRPC",
		3: "PROTOCOL_TYPE_HTTP_PB",
		5: "PROTOCOL_TYPE_HTTP_JSON",
	}
	ProtocolType_value = map[string]int32{
		"PROTOCOL_TYPE_INVALID":   0,
		"PROTOCOL_TYPE_GRPC":      1,
		"PROTOCOL_TYPE_HTTP_PB":   3,
		"PROTOCOL_TYPE_HTTP_JSON": 5,
	}
)

func (x ProtocolType) Enum() *ProtocolType {
	p := new(ProtocolType)
	*p = x
	return p
}

func (x ProtocolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProtocolType) Descriptor() protoreflect.EnumDescriptor {
	return file_comm_comm_proto_enumTypes[4].Descriptor()
}

func (ProtocolType) Type() protoreflect.EnumType {
	return &file_comm_comm_proto_enumTypes[4]
}

func (x ProtocolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProtocolType.Descriptor instead.
func (ProtocolType) EnumDescriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{4}
}

type EventStatus int32

const (
	EventStatus_EVENT_STATUS_INVALID                          EventStatus = 0   //INVALID
	EventStatus_EVENT_STATUS_MAKING                           EventStatus = 1   //
	EventStatus_EVENT_STATUS_INIT                             EventStatus = 100 //
	EventStatus_EVENT_STATUS_IN_REAL_TIME_QUEUE               EventStatus = 200 //
	EventStatus_EVENT_STATUS_RETEY_IN_REAL_TIME_QUEUE         EventStatus = 201 //
	EventStatus_EVENT_STATUS_REPEAT_IN_REAL_TIME_QUEUE        EventStatus = 202 //
	EventStatus_EVENT_STATUS_DELAY_PROCESS_IN_REAL_TIME_QUEUE EventStatus = 203 //
	EventStatus_EVENT_STATUS_IN_DELAY_QUEUE                   EventStatus = 300 //
	EventStatus_EVENT_STATUS_RETEY_IN_DELAY_QUEUE             EventStatus = 301 //
	EventStatus_EVENT_STATUS_REPEAT_IN_DELAY_QUEUE            EventStatus = 302 //
	EventStatus_EVENT_STATUS_DELAY_PROCESS_IN_DELAY_QUEUE     EventStatus = 303 //
	EventStatus_EVENT_STATUS_TX_CALLBACK_IN_DELAY_QUEUE       EventStatus = 304 //
	EventStatus_EVENT_STATUS_DELAY_RIGGER                     EventStatus = 400 //
	EventStatus_EVENT_STATUS_WAIT_PROCESS                     EventStatus = 500 //
	EventStatus_EVENT_STATUS_PROCESS_SUCC                     EventStatus = 501 //
	EventStatus_EVENT_STATUS_PROCESS_FAILED                   EventStatus = 502 //
)

// Enum value maps for EventStatus.
var (
	EventStatus_name = map[int32]string{
		0:   "EVENT_STATUS_INVALID",
		1:   "EVENT_STATUS_MAKING",
		100: "EVENT_STATUS_INIT",
		200: "EVENT_STATUS_IN_REAL_TIME_QUEUE",
		201: "EVENT_STATUS_RETEY_IN_REAL_TIME_QUEUE",
		202: "EVENT_STATUS_REPEAT_IN_REAL_TIME_QUEUE",
		203: "EVENT_STATUS_DELAY_PROCESS_IN_REAL_TIME_QUEUE",
		300: "EVENT_STATUS_IN_DELAY_QUEUE",
		301: "EVENT_STATUS_RETEY_IN_DELAY_QUEUE",
		302: "EVENT_STATUS_REPEAT_IN_DELAY_QUEUE",
		303: "EVENT_STATUS_DELAY_PROCESS_IN_DELAY_QUEUE",
		304: "EVENT_STATUS_TX_CALLBACK_IN_DELAY_QUEUE",
		400: "EVENT_STATUS_DELAY_RIGGER",
		500: "EVENT_STATUS_WAIT_PROCESS",
		501: "EVENT_STATUS_PROCESS_SUCC",
		502: "EVENT_STATUS_PROCESS_FAILED",
	}
	EventStatus_value = map[string]int32{
		"EVENT_STATUS_INVALID":                          0,
		"EVENT_STATUS_MAKING":                           1,
		"EVENT_STATUS_INIT":                             100,
		"EVENT_STATUS_IN_REAL_TIME_QUEUE":               200,
		"EVENT_STATUS_RETEY_IN_REAL_TIME_QUEUE":         201,
		"EVENT_STATUS_REPEAT_IN_REAL_TIME_QUEUE":        202,
		"EVENT_STATUS_DELAY_PROCESS_IN_REAL_TIME_QUEUE": 203,
		"EVENT_STATUS_IN_DELAY_QUEUE":                   300,
		"EVENT_STATUS_RETEY_IN_DELAY_QUEUE":             301,
		"EVENT_STATUS_REPEAT_IN_DELAY_QUEUE":            302,
		"EVENT_STATUS_DELAY_PROCESS_IN_DELAY_QUEUE":     303,
		"EVENT_STATUS_TX_CALLBACK_IN_DELAY_QUEUE":       304,
		"EVENT_STATUS_DELAY_RIGGER":                     400,
		"EVENT_STATUS_WAIT_PROCESS":                     500,
		"EVENT_STATUS_PROCESS_SUCC":                     501,
		"EVENT_STATUS_PROCESS_FAILED":                   502,
	}
)

func (x EventStatus) Enum() *EventStatus {
	p := new(EventStatus)
	*p = x
	return p
}

func (x EventStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_comm_comm_proto_enumTypes[5].Descriptor()
}

func (EventStatus) Type() protoreflect.EnumType {
	return &file_comm_comm_proto_enumTypes[5]
}

func (x EventStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventStatus.Descriptor instead.
func (EventStatus) EnumDescriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{5}
}

//
type EventSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source     string               `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Qua        string               `protobuf:"bytes,2,opt,name=qua,proto3" json:"qua,omitempty"`
	CreateTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *EventSource) Reset() {
	*x = EventSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSource) ProtoMessage() {}

func (x *EventSource) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSource.ProtoReflect.Descriptor instead.
func (*EventSource) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{0}
}

func (x *EventSource) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *EventSource) GetQua() string {
	if x != nil {
		return x.Qua
	}
	return ""
}

func (x *EventSource) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

//
type EventComm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventSource *EventSource `protobuf:"bytes,1,opt,name=event_source,json=eventSource,proto3" json:"event_source,omitempty"`
	EventTag    *EventTag    `protobuf:"bytes,2,opt,name=event_tag,json=eventTag,proto3" json:"event_tag,omitempty"`
}

func (x *EventComm) Reset() {
	*x = EventComm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventComm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventComm) ProtoMessage() {}

func (x *EventComm) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventComm.ProtoReflect.Descriptor instead.
func (*EventComm) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{1}
}

func (x *EventComm) GetEventSource() *EventSource {
	if x != nil {
		return x.EventSource
	}
	return nil
}

func (x *EventComm) GetEventTag() *EventTag {
	if x != nil {
		return x.EventTag
	}
	return nil
}

//tag
type EventTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//tag
	TagList []string `protobuf:"bytes,1,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
}

func (x *EventTag) Reset() {
	*x = EventTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTag) ProtoMessage() {}

func (x *EventTag) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTag.ProtoReflect.Descriptor instead.
func (*EventTag) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{2}
}

func (x *EventTag) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

//
type TxCallback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint         *Endpoint          `protobuf:"bytes,1,opt,name=Endpoint,proto3" json:"Endpoint,omitempty"`
	CallbackInterval *duration.Duration `protobuf:"bytes,2,opt,name=callback_interval,json=callbackInterval,proto3" json:"callback_interval,omitempty"`
}

func (x *TxCallback) Reset() {
	*x = TxCallback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxCallback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxCallback) ProtoMessage() {}

func (x *TxCallback) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxCallback.ProtoReflect.Descriptor instead.
func (*TxCallback) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{3}
}

func (x *TxCallback) GetEndpoint() *Endpoint {
	if x != nil {
		return x.Endpoint
	}
	return nil
}

func (x *TxCallback) GetCallbackInterval() *duration.Duration {
	if x != nil {
		return x.CallbackInterval
	}
	return nil
}

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 0:invalid 1:grpc  3:http
	ProtocolType ProtocolType       `protobuf:"varint,1,opt,name=protocol_type,json=protocolType,proto3,enum=evhub_comm.ProtocolType" json:"protocol_type,omitempty"`
	Address      string             `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Timeout      *duration.Duration `protobuf:"bytes,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{4}
}

func (x *Endpoint) GetProtocolType() ProtocolType {
	if x != nil {
		return x.ProtocolType
	}
	return ProtocolType_PROTOCOL_TYPE_INVALID
}

func (x *Endpoint) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Endpoint) GetTimeout() *duration.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

//
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     string     `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	TopicId   string     `protobuf:"bytes,2,opt,name=topic_id,json=topicId,proto3" json:"topic_id,omitempty"`
	EventComm *EventComm `protobuf:"bytes,3,opt,name=event_comm,json=eventComm,proto3" json:"event_comm,omitempty"`
	Data      []byte     `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{5}
}

func (x *Event) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *Event) GetTopicId() string {
	if x != nil {
		return x.TopicId
	}
	return ""
}

func (x *Event) GetEventComm() *EventComm {
	if x != nil {
		return x.EventComm
	}
	return nil
}

func (x *Event) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

//
type EventTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriggerType             EventTriggerType            `protobuf:"varint,1,opt,name=trigger_type,json=triggerType,proto3,enum=evhub_comm.EventTriggerType" json:"trigger_type,omitempty"`
	DelayTrigger            *EventDelayTrigger          `protobuf:"bytes,2,opt,name=delay_trigger,json=delayTrigger,proto3" json:"delay_trigger,omitempty"`
	RepeatTrigger           *EventRepeatTrigger         `protobuf:"bytes,3,opt,name=repeat_trigger,json=repeatTrigger,proto3" json:"repeat_trigger,omitempty"`
	DelayProcessTriggerList []*EventDelayProcessTrigger `protobuf:"bytes,4,rep,name=delay_process_trigger_list,json=delayProcessTriggerList,proto3" json:"delay_process_trigger_list,omitempty"`
}

func (x *EventTrigger) Reset() {
	*x = EventTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTrigger) ProtoMessage() {}

func (x *EventTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTrigger.ProtoReflect.Descriptor instead.
func (*EventTrigger) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{6}
}

func (x *EventTrigger) GetTriggerType() EventTriggerType {
	if x != nil {
		return x.TriggerType
	}
	return EventTriggerType_EVENT_TRIGGER_TYPE_INVALID
}

func (x *EventTrigger) GetDelayTrigger() *EventDelayTrigger {
	if x != nil {
		return x.DelayTrigger
	}
	return nil
}

func (x *EventTrigger) GetRepeatTrigger() *EventRepeatTrigger {
	if x != nil {
		return x.RepeatTrigger
	}
	return nil
}

func (x *EventTrigger) GetDelayProcessTriggerList() []*EventDelayProcessTrigger {
	if x != nil {
		return x.DelayProcessTriggerList
	}
	return nil
}

//
type EventDelayTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelayTime *duration.Duration `protobuf:"bytes,1,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`
}

func (x *EventDelayTrigger) Reset() {
	*x = EventDelayTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventDelayTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDelayTrigger) ProtoMessage() {}

func (x *EventDelayTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDelayTrigger.ProtoReflect.Descriptor instead.
func (*EventDelayTrigger) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{7}
}

func (x *EventDelayTrigger) GetDelayTime() *duration.Duration {
	if x != nil {
		return x.DelayTime
	}
	return nil
}

//
type RepeatEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepeatTimes uint32               `protobuf:"varint,1,opt,name=repeat_times,json=repeatTimes,proto3" json:"repeat_times,omitempty"`
	EndTime     *timestamp.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *RepeatEnd) Reset() {
	*x = RepeatEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatEnd) ProtoMessage() {}

func (x *RepeatEnd) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatEnd.ProtoReflect.Descriptor instead.
func (*RepeatEnd) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{8}
}

func (x *RepeatEnd) GetRepeatTimes() uint32 {
	if x != nil {
		return x.RepeatTimes
	}
	return 0
}

func (x *RepeatEnd) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

//
type RegularPulser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval *duration.Duration `protobuf:"bytes,1,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *RegularPulser) Reset() {
	*x = RegularPulser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegularPulser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegularPulser) ProtoMessage() {}

func (x *RegularPulser) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegularPulser.ProtoReflect.Descriptor instead.
func (*RegularPulser) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{9}
}

func (x *RegularPulser) GetInterval() *duration.Duration {
	if x != nil {
		return x.Interval
	}
	return nil
}

//crontab
type CrontabPulser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crontab string `protobuf:"bytes,1,opt,name=crontab,proto3" json:"crontab,omitempty"`
}

func (x *CrontabPulser) Reset() {
	*x = CrontabPulser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrontabPulser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrontabPulser) ProtoMessage() {}

func (x *CrontabPulser) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrontabPulser.ProtoReflect.Descriptor instead.
func (*CrontabPulser) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{10}
}

func (x *CrontabPulser) GetCrontab() string {
	if x != nil {
		return x.Crontab
	}
	return ""
}

type EventRepeatTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginTime     *timestamp.Timestamp `protobuf:"bytes,1,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"`
	EndType       EventRepeatEndType   `protobuf:"varint,2,opt,name=end_type,json=endType,proto3,enum=evhub_comm.EventRepeatEndType" json:"end_type,omitempty"`
	RepeatEnd     *RepeatEnd           `protobuf:"bytes,3,opt,name=repeat_end,json=repeatEnd,proto3" json:"repeat_end,omitempty"`
	PulserType    EventPulserType      `protobuf:"varint,4,opt,name=pulser_type,json=pulserType,proto3,enum=evhub_comm.EventPulserType" json:"pulser_type,omitempty"`
	RegularPulser *RegularPulser       `protobuf:"bytes,5,opt,name=regular_pulser,json=regularPulser,proto3" json:"regular_pulser,omitempty"`
	CrontabPulser *CrontabPulser       `protobuf:"bytes,6,opt,name=crontab_pulser,json=crontabPulser,proto3" json:"crontab_pulser,omitempty"`
}

func (x *EventRepeatTrigger) Reset() {
	*x = EventRepeatTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventRepeatTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventRepeatTrigger) ProtoMessage() {}

func (x *EventRepeatTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventRepeatTrigger.ProtoReflect.Descriptor instead.
func (*EventRepeatTrigger) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{11}
}

func (x *EventRepeatTrigger) GetBeginTime() *timestamp.Timestamp {
	if x != nil {
		return x.BeginTime
	}
	return nil
}

func (x *EventRepeatTrigger) GetEndType() EventRepeatEndType {
	if x != nil {
		return x.EndType
	}
	return EventRepeatEndType_EVENT_REPEAT_END_TYPE_INVALID
}

func (x *EventRepeatTrigger) GetRepeatEnd() *RepeatEnd {
	if x != nil {
		return x.RepeatEnd
	}
	return nil
}

func (x *EventRepeatTrigger) GetPulserType() EventPulserType {
	if x != nil {
		return x.PulserType
	}
	return EventPulserType_EVENT_PULSER_TYPE_INVALID
}

func (x *EventRepeatTrigger) GetRegularPulser() *RegularPulser {
	if x != nil {
		return x.RegularPulser
	}
	return nil
}

func (x *EventRepeatTrigger) GetCrontabPulser() *CrontabPulser {
	if x != nil {
		return x.CrontabPulser
	}
	return nil
}

type EventDelayProcessTrigger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       string             `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	DelayTime *duration.Duration `protobuf:"bytes,2,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`
}

func (x *EventDelayProcessTrigger) Reset() {
	*x = EventDelayProcessTrigger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventDelayProcessTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDelayProcessTrigger) ProtoMessage() {}

func (x *EventDelayProcessTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDelayProcessTrigger.ProtoReflect.Descriptor instead.
func (*EventDelayProcessTrigger) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{12}
}

func (x *EventDelayProcessTrigger) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EventDelayProcessTrigger) GetDelayTime() *duration.Duration {
	if x != nil {
		return x.DelayTime
	}
	return nil
}

type EventOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idempotent  *EventIdempotent `protobuf:"bytes,1,opt,name=idempotent,proto3" json:"idempotent,omitempty"`
	OrderingKey string           `protobuf:"bytes,2,opt,name=orderingKey,proto3" json:"orderingKey,omitempty"`
}

func (x *EventOption) Reset() {
	*x = EventOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventOption) ProtoMessage() {}

func (x *EventOption) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventOption.ProtoReflect.Descriptor instead.
func (*EventOption) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{13}
}

func (x *EventOption) GetIdempotent() *EventIdempotent {
	if x != nil {
		return x.Idempotent
	}
	return nil
}

func (x *EventOption) GetOrderingKey() string {
	if x != nil {
		return x.OrderingKey
	}
	return ""
}

type EventIdempotent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key            string             `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	IdempotentTime *duration.Duration `protobuf:"bytes,2,opt,name=idempotent_time,json=idempotentTime,proto3" json:"idempotent_time,omitempty"`
}

func (x *EventIdempotent) Reset() {
	*x = EventIdempotent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventIdempotent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventIdempotent) ProtoMessage() {}

func (x *EventIdempotent) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventIdempotent.ProtoReflect.Descriptor instead.
func (*EventIdempotent) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{14}
}

func (x *EventIdempotent) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EventIdempotent) GetIdempotentTime() *duration.Duration {
	if x != nil {
		return x.IdempotentTime
	}
	return nil
}

type EvhubMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId        string               `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Status         EventStatus          `protobuf:"varint,2,opt,name=status,proto3,enum=evhub_comm.EventStatus" json:"status,omitempty"`
	Event          *Event               `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	TriggerInfo    *EventTriggerInfo    `protobuf:"bytes,4,opt,name=trigger_info,json=triggerInfo,proto3" json:"trigger_info,omitempty"`
	DispatcherInfo *EventDispatcherInfo `protobuf:"bytes,5,opt,name=dispatcherInfo,proto3" json:"dispatcherInfo,omitempty"`
}

func (x *EvhubMsg) Reset() {
	*x = EvhubMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvhubMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvhubMsg) ProtoMessage() {}

func (x *EvhubMsg) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvhubMsg.ProtoReflect.Descriptor instead.
func (*EvhubMsg) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{15}
}

func (x *EvhubMsg) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EvhubMsg) GetStatus() EventStatus {
	if x != nil {
		return x.Status
	}
	return EventStatus_EVENT_STATUS_INVALID
}

func (x *EvhubMsg) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *EvhubMsg) GetTriggerInfo() *EventTriggerInfo {
	if x != nil {
		return x.TriggerInfo
	}
	return nil
}

func (x *EvhubMsg) GetDispatcherInfo() *EventDispatcherInfo {
	if x != nil {
		return x.DispatcherInfo
	}
	return nil
}

type EventTriggerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trigger     *EventTrigger `protobuf:"bytes,1,opt,name=trigger,proto3" json:"trigger,omitempty"`
	RepeatTimes uint32        `protobuf:"varint,2,opt,name=repeat_times,json=repeatTimes,proto3" json:"repeat_times,omitempty"`
}

func (x *EventTriggerInfo) Reset() {
	*x = EventTriggerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTriggerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTriggerInfo) ProtoMessage() {}

func (x *EventTriggerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTriggerInfo.ProtoReflect.Descriptor instead.
func (*EventTriggerInfo) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{16}
}

func (x *EventTriggerInfo) GetTrigger() *EventTrigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

func (x *EventTriggerInfo) GetRepeatTimes() uint32 {
	if x != nil {
		return x.RepeatTimes
	}
	return 0
}

type EventDispatcherInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DispatcherId string `protobuf:"bytes,1,opt,name=dispatcher_id,json=dispatcherId,proto3" json:"dispatcher_id,omitempty"`
	RetryTimes   uint32 `protobuf:"varint,2,opt,name=retry_times,json=retryTimes,proto3" json:"retry_times,omitempty"`
	PassBack     []byte `protobuf:"bytes,3,opt,name=pass_back,json=passBack,proto3" json:"pass_back,omitempty"`
}

func (x *EventDispatcherInfo) Reset() {
	*x = EventDispatcherInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventDispatcherInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventDispatcherInfo) ProtoMessage() {}

func (x *EventDispatcherInfo) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventDispatcherInfo.ProtoReflect.Descriptor instead.
func (*EventDispatcherInfo) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{17}
}

func (x *EventDispatcherInfo) GetDispatcherId() string {
	if x != nil {
		return x.DispatcherId
	}
	return ""
}

func (x *EventDispatcherInfo) GetRetryTimes() uint32 {
	if x != nil {
		return x.RetryTimes
	}
	return 0
}

func (x *EventDispatcherInfo) GetPassBack() []byte {
	if x != nil {
		return x.PassBack
	}
	return nil
}

type Tx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventId string   `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	Status  TxStatus `protobuf:"varint,2,opt,name=status,proto3,enum=evhub_comm.TxStatus" json:"status,omitempty"`
}

func (x *Tx) Reset() {
	*x = Tx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{18}
}

func (x *Tx) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *Tx) GetStatus() TxStatus {
	if x != nil {
		return x.Status
	}
	return TxStatus_TX_STATUS_INVALID
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{19}
}

func (x *Result) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Result) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type Err struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	PassBack []byte `protobuf:"bytes,3,opt,name=pass_back,json=passBack,proto3" json:"pass_back,omitempty"`
}

func (x *Err) Reset() {
	*x = Err{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comm_comm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Err) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Err) ProtoMessage() {}

func (x *Err) ProtoReflect() protoreflect.Message {
	mi := &file_comm_comm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Err.ProtoReflect.Descriptor instead.
func (*Err) Descriptor() ([]byte, []int) {
	return file_comm_comm_proto_rawDescGZIP(), []int{20}
}

func (x *Err) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Err) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *Err) GetPassBack() []byte {
	if x != nil {
		return x.PassBack
	}
	return nil
}

var File_comm_comm_proto protoreflect.FileDescriptor

var file_comm_comm_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0a, 0x65, 0x76, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x74,
	0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x75, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x71, 0x75, 0x61, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x12, 0x3a, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x68, 0x75, 0x62, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x31, 0x0a,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x65, 0x76, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x52, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67,
	0x22, 0x25, 0x0a, 0x08, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x0a, 0x54, 0x78, 0x43, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x65, 0x76, 0x68, 0x75, 0x62,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x22, 0x98, 0x01, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x65, 0x76, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76,
	0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xbd, 0x02, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x68, 0x75, 0x62,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x76, 0x68,
	0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x65, 0x76, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x61,
	0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x76, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x17, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x4d, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x65, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22,
	0x29, 0x0a, 0x0d, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x22, 0x82, 0x03, 0x0a, 0x12, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x65, 0x76, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x65, 0x76,
	0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x45,
	0x6e, 0x64, 0x52, 0x09, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x3c, 0x0a,
	0x0b, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x2e, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x72, 0x52, 0x0d,
	0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x72, 0x12, 0x40, 0x0a,
	0x0e, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x5f, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x76, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x72,
	0x52, 0x0d, 0x63, 0x72, 0x6f, 0x6e, 0x74, 0x61, 0x62, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x72, 0x22,
	0x66, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38, 0x0a,
	0x0a, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x65, 0x76, 0x68,
	0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65,
	0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x22, 0x67, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x64,
	0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e,
	0x69, 0x64, 0x65, 0x6d, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x89,
	0x02, 0x0a, 0x08, 0x65, 0x76, 0x68, 0x75, 0x62, 0x4d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x65, 0x76, 0x68, 0x75, 0x62, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x76, 0x68, 0x75, 0x62, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x76, 0x68, 0x75, 0x62, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x47, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x76, 0x68, 0x75,
	0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x69, 0x0a, 0x10, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32,
	0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x65, 0x76, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x22,
	0x4d, 0x0a, 0x02, 0x54, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x65, 0x76, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x2e, 0x54, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x2e,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x48,
	0x0a, 0x03, 0x45, 0x72, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x73, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x2a, 0xb7, 0x01, 0x0a, 0x10, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a,
	0x1c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x04, 0x2a, 0x8b, 0x01, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x2a, 0x0a, 0x26,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02,
	0x2a, 0x75, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x75, 0x6c, 0x73, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x55, 0x4c,
	0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x55, 0x4c, 0x53,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50,
	0x55, 0x4c, 0x53, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x59, 0x5f, 0x43, 0x52,
	0x4f, 0x4e, 0x54, 0x41, 0x42, 0x10, 0x02, 0x2a, 0x7d, 0x0a, 0x08, 0x54, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x58,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x58, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x54, 0x58, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x2a, 0x79, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43,
	0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x52, 0x50, 0x43, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f,
	0x50, 0x42, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x54, 0x54, 0x50, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10,
	0x05, 0x2a, 0xdd, 0x04, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x64, 0x12, 0x24, 0x0a, 0x1f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x52,
	0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0xc8,
	0x01, 0x12, 0x2a, 0x0a, 0x25, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x45, 0x54, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0xc9, 0x01, 0x12, 0x2b, 0x0a,
	0x26, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45,
	0x50, 0x45, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0xca, 0x01, 0x12, 0x32, 0x0a, 0x2d, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59,
	0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x4c,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0xcb, 0x01, 0x12, 0x20,
	0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0xac, 0x02,
	0x12, 0x26, 0x0a, 0x21, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x45, 0x54, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0xad, 0x02, 0x12, 0x27, 0x0a, 0x22, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f,
	0x49, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0xae,
	0x02, 0x12, 0x2e, 0x0a, 0x29, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f,
	0x49, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0xaf,
	0x02, 0x12, 0x2c, 0x0a, 0x27, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x54, 0x58, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x49, 0x4e,
	0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0xb0, 0x02, 0x12,
	0x1e, 0x0a, 0x19, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x45, 0x4c, 0x41, 0x59, 0x5f, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x90, 0x03, 0x12,
	0x1e, 0x0a, 0x19, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0xf4, 0x03, 0x12,
	0x1e, 0x0a, 0x19, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x10, 0xf5, 0x03, 0x12,
	0x20, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xf6,
	0x03, 0x42, 0x16, 0x5a, 0x14, 0x65, 0x76, 0x68, 0x75, 0x62, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_comm_comm_proto_rawDescOnce sync.Once
	file_comm_comm_proto_rawDescData = file_comm_comm_proto_rawDesc
)

func file_comm_comm_proto_rawDescGZIP() []byte {
	file_comm_comm_proto_rawDescOnce.Do(func() {
		file_comm_comm_proto_rawDescData = protoimpl.X.CompressGZIP(file_comm_comm_proto_rawDescData)
	})
	return file_comm_comm_proto_rawDescData
}

var file_comm_comm_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_comm_comm_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_comm_comm_proto_goTypes = []interface{}{
	(EventTriggerType)(0),            // 0: evhub_comm.EventTriggerType
	(EventRepeatEndType)(0),          // 1: evhub_comm.EventRepeatEndType
	(EventPulserType)(0),             // 2: evhub_comm.EventPulserType
	(TxStatus)(0),                    // 3: evhub_comm.TxStatus
	(ProtocolType)(0),                // 4: evhub_comm.ProtocolType
	(EventStatus)(0),                 // 5: evhub_comm.EventStatus
	(*EventSource)(nil),              // 6: evhub_comm.EventSource
	(*EventComm)(nil),                // 7: evhub_comm.EventComm
	(*EventTag)(nil),                 // 8: evhub_comm.EventTag
	(*TxCallback)(nil),               // 9: evhub_comm.TxCallback
	(*Endpoint)(nil),                 // 10: evhub_comm.Endpoint
	(*Event)(nil),                    // 11: evhub_comm.Event
	(*EventTrigger)(nil),             // 12: evhub_comm.EventTrigger
	(*EventDelayTrigger)(nil),        // 13: evhub_comm.EventDelayTrigger
	(*RepeatEnd)(nil),                // 14: evhub_comm.RepeatEnd
	(*RegularPulser)(nil),            // 15: evhub_comm.RegularPulser
	(*CrontabPulser)(nil),            // 16: evhub_comm.CrontabPulser
	(*EventRepeatTrigger)(nil),       // 17: evhub_comm.EventRepeatTrigger
	(*EventDelayProcessTrigger)(nil), // 18: evhub_comm.EventDelayProcessTrigger
	(*EventOption)(nil),              // 19: evhub_comm.EventOption
	(*EventIdempotent)(nil),          // 20: evhub_comm.EventIdempotent
	(*EvhubMsg)(nil),                 // 21: evhub_comm.evhubMsg
	(*EventTriggerInfo)(nil),         // 22: evhub_comm.EventTriggerInfo
	(*EventDispatcherInfo)(nil),      // 23: evhub_comm.EventDispatcherInfo
	(*Tx)(nil),                       // 24: evhub_comm.Tx
	(*Result)(nil),                   // 25: evhub_comm.Result
	(*Err)(nil),                      // 26: evhub_comm.Err
	(*timestamp.Timestamp)(nil),      // 27: google.protobuf.Timestamp
	(*duration.Duration)(nil),        // 28: google.protobuf.Duration
}
var file_comm_comm_proto_depIdxs = []int32{
	27, // 0: evhub_comm.EventSource.create_time:type_name -> google.protobuf.Timestamp
	6,  // 1: evhub_comm.EventComm.event_source:type_name -> evhub_comm.EventSource
	8,  // 2: evhub_comm.EventComm.event_tag:type_name -> evhub_comm.EventTag
	10, // 3: evhub_comm.TxCallback.Endpoint:type_name -> evhub_comm.Endpoint
	28, // 4: evhub_comm.TxCallback.callback_interval:type_name -> google.protobuf.Duration
	4,  // 5: evhub_comm.Endpoint.protocol_type:type_name -> evhub_comm.ProtocolType
	28, // 6: evhub_comm.Endpoint.timeout:type_name -> google.protobuf.Duration
	7,  // 7: evhub_comm.Event.event_comm:type_name -> evhub_comm.EventComm
	0,  // 8: evhub_comm.EventTrigger.trigger_type:type_name -> evhub_comm.EventTriggerType
	13, // 9: evhub_comm.EventTrigger.delay_trigger:type_name -> evhub_comm.EventDelayTrigger
	17, // 10: evhub_comm.EventTrigger.repeat_trigger:type_name -> evhub_comm.EventRepeatTrigger
	18, // 11: evhub_comm.EventTrigger.delay_process_trigger_list:type_name -> evhub_comm.EventDelayProcessTrigger
	28, // 12: evhub_comm.EventDelayTrigger.delay_time:type_name -> google.protobuf.Duration
	27, // 13: evhub_comm.RepeatEnd.end_time:type_name -> google.protobuf.Timestamp
	28, // 14: evhub_comm.RegularPulser.interval:type_name -> google.protobuf.Duration
	27, // 15: evhub_comm.EventRepeatTrigger.begin_time:type_name -> google.protobuf.Timestamp
	1,  // 16: evhub_comm.EventRepeatTrigger.end_type:type_name -> evhub_comm.EventRepeatEndType
	14, // 17: evhub_comm.EventRepeatTrigger.repeat_end:type_name -> evhub_comm.RepeatEnd
	2,  // 18: evhub_comm.EventRepeatTrigger.pulser_type:type_name -> evhub_comm.EventPulserType
	15, // 19: evhub_comm.EventRepeatTrigger.regular_pulser:type_name -> evhub_comm.RegularPulser
	16, // 20: evhub_comm.EventRepeatTrigger.crontab_pulser:type_name -> evhub_comm.CrontabPulser
	28, // 21: evhub_comm.EventDelayProcessTrigger.delay_time:type_name -> google.protobuf.Duration
	20, // 22: evhub_comm.EventOption.idempotent:type_name -> evhub_comm.EventIdempotent
	28, // 23: evhub_comm.EventIdempotent.idempotent_time:type_name -> google.protobuf.Duration
	5,  // 24: evhub_comm.evhubMsg.status:type_name -> evhub_comm.EventStatus
	11, // 25: evhub_comm.evhubMsg.event:type_name -> evhub_comm.Event
	22, // 26: evhub_comm.evhubMsg.trigger_info:type_name -> evhub_comm.EventTriggerInfo
	23, // 27: evhub_comm.evhubMsg.dispatcherInfo:type_name -> evhub_comm.EventDispatcherInfo
	12, // 28: evhub_comm.EventTriggerInfo.trigger:type_name -> evhub_comm.EventTrigger
	3,  // 29: evhub_comm.Tx.status:type_name -> evhub_comm.TxStatus
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_comm_comm_proto_init() }
func file_comm_comm_proto_init() {
	if File_comm_comm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_comm_comm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventComm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxCallback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventDelayTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegularPulser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrontabPulser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventRepeatTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventDelayProcessTrigger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventIdempotent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvhubMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTriggerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventDispatcherInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comm_comm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Err); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_comm_comm_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_comm_comm_proto_goTypes,
		DependencyIndexes: file_comm_comm_proto_depIdxs,
		EnumInfos:         file_comm_comm_proto_enumTypes,
		MessageInfos:      file_comm_comm_proto_msgTypes,
	}.Build()
	File_comm_comm_proto = out.File
	file_comm_comm_proto_rawDesc = nil
	file_comm_comm_proto_goTypes = nil
	file_comm_comm_proto_depIdxs = nil
}
