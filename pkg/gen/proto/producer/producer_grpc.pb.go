// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.11.0
// source: producer/producer.proto

package producer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EvhubProducerClient is the client API for EvhubProducer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EvhubProducerClient interface {
	Report(ctx context.Context, in *ReportReq, opts ...grpc.CallOption) (*ReportRsp, error)
	Prepare(ctx context.Context, in *PrepareReq, opts ...grpc.CallOption) (*PrepareRsp, error)
	Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitRsp, error)
	Rollback(ctx context.Context, in *RollbackReq, opts ...grpc.CallOption) (*RollbackRsp, error)
}

type evhubProducerClient struct {
	cc grpc.ClientConnInterface
}

func NewEvhubProducerClient(cc grpc.ClientConnInterface) EvhubProducerClient {
	return &evhubProducerClient{cc}
}

func (c *evhubProducerClient) Report(ctx context.Context, in *ReportReq, opts ...grpc.CallOption) (*ReportRsp, error) {
	out := new(ReportRsp)
	err := c.cc.Invoke(ctx, "/evhub_producer.evhubProducer/Report", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evhubProducerClient) Prepare(ctx context.Context, in *PrepareReq, opts ...grpc.CallOption) (*PrepareRsp, error) {
	out := new(PrepareRsp)
	err := c.cc.Invoke(ctx, "/evhub_producer.evhubProducer/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evhubProducerClient) Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitRsp, error) {
	out := new(CommitRsp)
	err := c.cc.Invoke(ctx, "/evhub_producer.evhubProducer/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evhubProducerClient) Rollback(ctx context.Context, in *RollbackReq, opts ...grpc.CallOption) (*RollbackRsp, error) {
	out := new(RollbackRsp)
	err := c.cc.Invoke(ctx, "/evhub_producer.evhubProducer/Rollback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvhubProducerServer is the server API for EvhubProducer service.
// All implementations should embed UnimplementedEvhubProducerServer
// for forward compatibility
type EvhubProducerServer interface {
	Report(context.Context, *ReportReq) (*ReportRsp, error)
	Prepare(context.Context, *PrepareReq) (*PrepareRsp, error)
	Commit(context.Context, *CommitReq) (*CommitRsp, error)
	Rollback(context.Context, *RollbackReq) (*RollbackRsp, error)
}

// UnimplementedEvhubProducerServer should be embedded to have forward compatible implementations.
type UnimplementedEvhubProducerServer struct {
}

func (UnimplementedEvhubProducerServer) Report(context.Context, *ReportReq) (*ReportRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedEvhubProducerServer) Prepare(context.Context, *PrepareReq) (*PrepareRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedEvhubProducerServer) Commit(context.Context, *CommitReq) (*CommitRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedEvhubProducerServer) Rollback(context.Context, *RollbackReq) (*RollbackRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}

// UnsafeEvhubProducerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EvhubProducerServer will
// result in compilation errors.
type UnsafeEvhubProducerServer interface {
	mustEmbedUnimplementedEvhubProducerServer()
}

func RegisterEvhubProducerServer(s grpc.ServiceRegistrar, srv EvhubProducerServer) {
	s.RegisterService(&EvhubProducer_ServiceDesc, srv)
}

func _EvhubProducer_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvhubProducerServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evhub_producer.evhubProducer/Report",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvhubProducerServer).Report(ctx, req.(*ReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvhubProducer_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvhubProducerServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evhub_producer.evhubProducer/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvhubProducerServer).Prepare(ctx, req.(*PrepareReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvhubProducer_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvhubProducerServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evhub_producer.evhubProducer/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvhubProducerServer).Commit(ctx, req.(*CommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _EvhubProducer_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvhubProducerServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/evhub_producer.evhubProducer/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvhubProducerServer).Rollback(ctx, req.(*RollbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

// EvhubProducer_ServiceDesc is the grpc.ServiceDesc for EvhubProducer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EvhubProducer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "evhub_producer.evhubProducer",
	HandlerType: (*EvhubProducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Report",
			Handler:    _EvhubProducer_Report_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _EvhubProducer_Prepare_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _EvhubProducer_Commit_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _EvhubProducer_Rollback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "producer/producer.proto",
}
